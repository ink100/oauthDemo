server:
  port: 8080
  servlet:
    context-path: /
  error:
    whitelabel:
      enabled: false


spring:
  application:
    name: oauth2-demo
  datasource:
    url: jdbc:mysql://aaa:13306/oauth2?useUnicode=true&characterEncoding=UTF-8
    #&serverTimezone=Asia/Shanghai
    username: root
    password: xxx
    driver-class-name: com.mysql.cj.jdbc.Driver
#??c??
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: Asia/Shanghai
    serialization:
      write-dates-as-timestamps: false
  data:
    redis:
      host: aaaa
      port: xxx
      password: myc2013.06
      database: 1
      timeout: 6000ms


  # OAuth2 Client Configuration

  security:
    oauth2:
      client:
        registration:
          github:
            client-id: your_github_client_id
            client-secret: your_github_client_secret
            scope: read:user,user:email
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/github"
            client-name: GitHub

        provider:
          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
            user-name-attribute: id

      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080  # JWT issuer URI for Resource Server validation

# MyBatis-Plus Configuration
mybatis-plus:
  mapper-locations: classpath:/mapper/**/*.xml
  global-config:
    db-config:
      logic-delete-field: is_deleted
      logic-delete-value: 1
      logic-not-delete-value: 0
  configuration:
    map-underscore-to-camel-case: true

# Redis-based token storage configuration (custom)
oauth2:
  token:
    store-type: redis   # Use Redis to store OAuth2 tokens
    access-token-expiration: 3600  # Access token expiration time in seconds
    refresh-token-expiration: 86400  # Refresh token expiration time in seconds

jwt:
  #??
  secret: KxkRcKRRZmiAOZoidRodLtmZfgWPIUoWmbiJpjmOrSFlkMwCjbYgdieKyXneaWHWpVVzyqyzxXViRFTjIoMyjlmhqfgqtddySejgBVfqRxuxVefCpBZstOFSCcPsaTqY
  #access token ???? 5??
  accessTokenExpiration: 300000
  # refresh token ????1?
  refreshTokenExpiration: "#{24*60*60*1000}"
  redisAccessTokenKeyName: jwt:access:{username}:{deviceId}       # accessToken 的 Redis key 格式
  redisRefreshTokenKeyName: jwt:refresh:{username}:{deviceId}     # refreshToken 的 Redis key 格式
  accessTokenName: "accessToken"        # accessToken 名称
  refreshTokenName: "refreshToken"      # refreshToken 名称
  enableRefreshToken: true            # 是否启用 refreshToken
  rememberMeAccessTokenExpiration: "#{24*60*60*1000}"
  apiTokenName: "token" #三方api的请求头

logging:
  level:
    org.springframework.security: DEBUG
    com.daym.oauth2: DEBUG
# springdoc-openapi项目配置
springdoc:
  swagger-ui:
    #自定义swagger前端请求路径,输入http:localhost:8080/doc.html会自动重定向到swagger页面
    path: /doc.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs    #swagger后端请求地址
    enabled: true   #是否开启文档功能
  group-configs:
    - group: 'default'   #分组名称
      paths-to-match: '/**'   #配置需要匹配的路径,默认为/**
      packages-to-scan: com.blog.patrick    #配置要扫描包的路径,一般配置到启动类所在的包名

# knife4j的增强配置，不需要增强可以不配(建议配置一下)
knife4j:
  enable: true    #开启knife4j,无需添加@EnableKnife4j注解
  setting:
    language: zh_cn   #中文
    swagger-model-name: 实体类列表   #重命名SwaggerModel名称,默认
  #开启Swagger的Basic认证功能,默认是false
  basic:
    enable: true
    # Basic认证用户名
    username: docuser
    # Basic认证密码
    password: docuser

